{"version":3,"sources":["Models.tsx","Words.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RoundState","randomName","potentialNames","Math","floor","random","length","Player","ref","uid","name","ready","team","props","this","update","Object","assign","constructor","otherPlayer","Game","ownerUid","players","roundLength","roundCount","startedAt","completedAt","rounds","owner","newUid","toString","replace","substr","firebase","database","game","Map","set","GameConverter","toFirebase","gameUid","callback","on","gameSnapshot","val","fromFirebase","get","Array","from","values","originalPlayer","allPlayers","filter","player","otherPlayers","isOnSameTeam","user","isStarted","child","PlayerConverter","previousRoundOwnerUid","currentRound","allPlayerIds","keys","newRoundOwner","previousRoundOwner","playerByUid","opponents","opponentsOf","ref1","push","Round","Pending","newRound","key","RoundConverter","Date","now","reduce","memo","round","concat","guessedWords","Dictionary","status","Running","Completed","Review","data","entries","map","snapshot","places","Set","CreationState","words","dict","PLACES","Colors","Title","children","style","fontWeight","color","Home","to","className","width","Host","useState","creationState","setCreationState","setGame","useEffect","Creating","a","create","Created","Error","Join","history","useHistory","location","useLocation","gameID","setGameID","error","queryString","parse","search","id","onChange","event","target","value","label","noLayout","onClick","disabled","Loading","active","flashing","size","Lobby","currentPlayer","addPlayer","LobbyPlayersList","data-badge-caption","LobbyLoaded","startButtonStatus","isOwner","every","parseInt","textAlign","start","marginLeft","RoundController","timeRemaining","setTimeRemaining","timer","setInterval","remaining","clearInterval","review","component","timeRemainingInSeconds","currentTeam","RoundProgress","attemptedWords","word","guessed","RoundTeammate","isPending","isRunning","totalTime","isReview","RoundOpponent","funnyThingsToSay","RoundOwner","roundProgress","setRoundProgress","teammatesOf","p","join","RoundOwnerRecap","successfullyGuessedWords","complete","continue","randomWordExcept","fromSource","except","difference","elem","delete","asArray","TimeRemaining","progress","ceil","RoundOwnerRunning","currentWord","setCurrentWord","pickNewCurrentWord","newRoundProgress","newCurrentWord","padding","margin","skipped","GameController","useParams","setError","subscribe","newGame","off","isCompleted","AlreadyStartedGame","App","setUser","auth","signInAnonymously","then","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initializeApp","apiKey","authDomain","projectId","storageBucket","databaseURL","messagingSenderId","appId","ReactDOM","StrictMode","document","getElementById"],"mappings":"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A,cACA,kBACA,UACA,UACA,eACA,SACA,UACA,YACA,YACA,WACA,eACA,eACA,oBACA,UACA,aACA,WACA,UACA,eACA,SACA,WACA,SACA,eACA,oBACA,SACA,gBACA,cACA,UACA,qBACA,QACA,qBACA,gBACA,YACA,cACA,aACA,WACA,cACA,QACA,OACA,iBACA,QACA,SACA,eACA,WACA,wBACA,UACA,YACA,UACA,uBACA,YACA,iBACA,WACA,UACA,eACA,2BACA,YACA,cACA,WACA,UACA,SACA,WACA,YACA,YACA,WACA,UACA,aACA,WACA,oBACA,WACA,UACA,UACA,YACA,WACA,SACA,mBACA,eACA,eACA,YACA,YACA,WACA,WACA,kBACA,YACA,QACA,WACA,UACA,cACA,aACA,WACA,eACA,SACA,aACA,QACA,YACA,aACA,SACA,UACA,QACA,WACA,cACA,SACA,UACA,iBACA,kBACA,cACA,cACA,SACA,SACA,gBACA,sBACA,WACA,UACA,YACA,WACA,gBACA,sBACA,sBACA,qBACA,YACA,SACA,WACA,YACA,OACA,kBACA,QACA,eACA,WACA,UACA,cACA,QACA,UACA,aACA,sBACA,iBACA,WACA,SACA,eACA,wBACA,WACA,YACA,aACA,WACA,iBACA,qBACA,kBACA,OACA,SACA,YACA,4BACA,2BACA,sBACA,uBACA,oBACA,gBACA,MACA,YACA,aACA,aACA,aACA,YACA,UACA,sBACA,0BACA,YACA,aACA,SACA,SACA,YACA,YACA,QACA,cACA,UACA,QACA,UACA,eACA,aACA,cACA,UACA,oBACA,UACA,gBACA,YACA,WACA,UACA,SACA,UACA,WACA,UACA,oBACA,aACA,aACA,WACA,cACA,MACA,YACA,YACA,eACA,cACA,yB,SAGUV,O,oBAAAA,M,KAIL,IC3LFW,ED2LQC,EAAQ,SAACC,GACpB,OAAQA,GACR,KAAKb,EAAWc,OAChB,KAAK,KACH,OAAOL,IC5NLM,G,cACC,WADDA,EAEE,UAFFA,EAGE,UAGFC,EAAQ,SAAC,GAAoC,IAAnCC,EAAkC,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","file":"static/js/main.a216b00c.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\nexport interface User {\n  uid: string;\n}\n\nconst randomName = (): string => {\n  const potentialNames: Array<string> = [\n    'Quasimodo',\n    'Rococo',\n    'Pistache',\n    'Frimousse',\n    'Boubou',\n    'Boucle d\\'Or',\n    'Yvon Tremblay',\n    'Tim Hagine',\n    'Sam Pique',\n    'Paul Ution',\n    'Pacôme les Autres',\n    'Marc des Points',\n    'Lara Tatouille',\n    'Kelly Diote'\n  ];\n\n  return potentialNames[Math.floor(Math.random() * Math.floor(potentialNames.length))];\n};\n\nexport class Player {\n  constructor(\n    readonly ref: firebase.database.Reference,\n    readonly uid: string,\n    readonly name: string = randomName(),\n    readonly ready: boolean = false,\n    readonly team: number = 0\n  ) {}\n\n  async update(props: {name?: string, ready?: boolean, team?: number}): Promise<Player> {\n    await this.ref.update(props);\n    // @ts-ignore\n    return Object.assign(new this.constructor(), { ...this, ...props });\n  }\n\n  isOnSameTeam(otherPlayer: Player) {\n    return this.team === otherPlayer.team;\n  }\n}\n\nconst randomGameID = (): string => {\n  return Math\n    .random()\n    .toString(36)\n    .replace(/[^a-z]+/g, '')\n    .substr(0, 4);\n};\n\nexport class Game {\n  static async create(owner: User): Promise<Game> {\n    const newUid = randomGameID();\n    const ref = firebase.database().ref('games/' + newUid);\n    const game = new Game(ref, newUid, owner.uid, new Map(), 60, 12);\n    await ref.set(GameConverter.toFirebase(game));\n\n    return game;\n  }\n\n  static subscribe(gameUid: string, callback: (newGame: Game | null) => void): firebase.database.Reference {\n    const ref = firebase.database().ref('games/' + gameUid);\n\n    ref.on('value', (gameSnapshot) => {\n      const val: GameSnapshot = gameSnapshot.val();\n\n      if (val) {\n        callback(GameConverter.fromFirebase(ref, val));\n      } else {\n        callback(null);\n      }\n    });\n\n    return ref;\n  }\n\n  constructor(\n    readonly ref: firebase.database.Reference,\n    readonly uid: string,\n    readonly ownerUid: string,\n    readonly players: Map<string, Player>,\n    readonly roundLength: number,\n    readonly roundCount: number,\n    readonly startedAt: number | null = null,\n    readonly completedAt: number | null = null,\n    readonly rounds: Array<Round> = [],\n  ) {}\n\n  async update(props: { roundLength?: number, roundCount?: number, completedAt?: number }): Promise<Player> {\n    await this.ref.update(props);\n    // @ts-ignore\n    return Object.assign(new this.constructor(), { ...this, ...props });\n  }\n\n  playerByUid(uid: string): Player | undefined {\n    return this.players.get(uid);\n  }\n\n  allPlayers(): Array<Player> {\n    return Array.from(this.players.values());\n  }\n\n  otherPlayers(originalPlayer: Player): Array<Player> {\n    return this.allPlayers().filter((player) => player.uid !== originalPlayer.uid);\n  }\n\n  teammatesOf(originalPlayer: Player): Array<Player> {\n    return this.otherPlayers(originalPlayer).filter((player) => originalPlayer.isOnSameTeam(player));\n  }\n\n  opponentsOf(originalPlayer: Player): Array<Player> {\n    return this.otherPlayers(originalPlayer).filter((player) => !originalPlayer.isOnSameTeam(player));\n  }\n\n  isOwner(player: Player): boolean {\n    return player.uid === this.ownerUid;\n  }\n\n  isStarted(): boolean {\n    return !!this.startedAt;\n  }\n\n  async addPlayer(user: User): Promise<Player> {\n    if (this.isStarted()) {\n      throw \"this game has already started\";\n    }\n\n    const ref = this.ref.child(`players/${user.uid}`);\n\n    const player = new Player(ref, user.uid);\n\n    await ref.set(PlayerConverter.toFirebase(player));\n\n    return player;\n  }\n\n  private newRound(): Round {\n    let previousRoundOwnerUid: string;\n    if (this.currentRound()) {\n      previousRoundOwnerUid = this.currentRound()!.ownerUid!;\n    } else {\n      const allPlayerIds = Array.from(this.players.keys());\n      previousRoundOwnerUid = allPlayerIds[Math.floor(Math.random() * Math.floor(allPlayerIds.length))]!;\n    }\n\n    const previousRoundOwner = this.playerByUid(previousRoundOwnerUid)!;\n    const opponents = this.opponentsOf(previousRoundOwner);\n\n    let newRoundOwner;\n    if (opponents.length === 0) {\n      newRoundOwner = previousRoundOwner;\n    } else {\n      newRoundOwner = opponents[Math.floor(this.rounds.length / 2) % opponents.length];\n    }\n\n    let ref1 = this.ref.child(\"rounds\").push();\n    return new Round(ref1, newRoundOwner.uid, RoundState.Pending);\n  }\n\n  async start(): Promise<null> {\n    const newRound = this.newRound();\n    let rounds: { [key: string]: any } = {};\n    rounds[newRound.ref.key!] = RoundConverter.toFirebase(newRound);\n\n    return await this.ref.update({ startedAt: Date.now(), rounds: rounds });\n  }\n\n  async continue(): Promise<null> {\n    if (this.rounds.length < this.roundCount) {\n      const newRound = this.newRound();\n      return await newRound.ref.set(RoundConverter.toFirebase(newRound));\n    } else {\n      await this.update({ completedAt: Date.now() });\n      return null;\n    }\n  }\n\n  currentRound(): Round | undefined {\n    return this.rounds[this.rounds.length - 1];\n  }\n\n  guessedWords(): Array<string> {\n    return this.rounds.reduce((memo: Array<string>, round) => memo.concat(round.guessedWords), []);\n  }\n\n  isCompleted() {\n    return !!this.completedAt;\n  }\n}\n\nenum RoundState {\n  Pending,\n  Running,\n  Review,\n  Completed,\n}\n\nexport class Round {\n  readonly guessedWords: Array<string>;\n\n  constructor(\n    readonly ref: firebase.database.Reference,\n    readonly ownerUid: string,\n    readonly status: RoundState,\n    readonly startedAt?: number | null,\n    readonly completedAt?: number | null,\n    guessedWords?: Array<string>,\n  ) {\n    this.guessedWords = guessedWords || [];\n  };\n\n  isOwner(player: Player) {\n    return player.uid === this.ownerUid;\n  }\n\n  isRunning(): boolean {\n    return this.status === RoundState.Running;\n  }\n\n  isCompleted(): boolean {\n    return this.status === RoundState.Completed;\n  }\n\n  isPending(): boolean {\n    return this.status === RoundState.Pending;\n  }\n\n  isReview(): boolean {\n    return this.status === RoundState.Review;\n  }\n\n  async update(props: {startedAt?: number, completedAt?: number, status?: RoundState, guessedWords?: Array<string>}): Promise<Round> {\n    await this.ref.update(props);\n    // @ts-ignore\n    return Object.assign(new this.constructor(), { ...this, ...props });\n  }\n\n  async start(): Promise<Round> {\n    return await this.update({ status: RoundState.Running, startedAt: Date.now() });\n  }\n\n  async review(): Promise<Round> {\n    return await this.update({ status: RoundState.Review });\n  }\n\n  async complete(guessedWords: Array<string>): Promise<Round> {\n    return await this.update({ status: RoundState.Completed, completedAt: Date.now(), guessedWords: guessedWords });\n  }\n}\n\ninterface PlayerMap {\n  [key: string]: PlayerSnapshot;\n}\n\ninterface RoundMap {\n  [key: string]: RoundSnapshot;\n}\n\ninterface GameSnapshot {\n  uid: string;\n  ownerUid: string;\n  roundLength: number;\n  roundCount: number,\n  players?: PlayerMap;\n  rounds?: RoundMap;\n  startedAt: number | null;\n  completedAt: number | null;\n}\n\nconst GameConverter = {\n  toFirebase(game: Game): GameSnapshot {\n    return { uid: game.uid, ownerUid: game.ownerUid, startedAt: game.startedAt, completedAt: game.completedAt, roundLength: game.roundLength, roundCount: game.roundCount };\n  },\n\n  fromFirebase(ref: firebase.database.Reference, data: GameSnapshot): Game {\n    const players: Array<[string, Player]> =\n      Object\n        .entries(data.players || {})\n        .map(([uid, snapshot]) => {\n          return [uid, PlayerConverter.fromFirebase(ref.child(`players/${snapshot.uid}`), snapshot)];\n        });\n\n    const rounds = Object.entries(data.rounds || {}).map(([key, snapshot]) => {\n      return RoundConverter.fromFirebase(ref.child(`rounds/${key}`), snapshot);\n    });\n\n    return new Game(ref, data.uid, data.ownerUid, new Map(players), data.roundLength, data.roundCount, data.startedAt, data.completedAt, rounds);\n  }\n};\n\ninterface PlayerSnapshot {\n  uid: string;\n  name: string | null;\n  ready: boolean;\n  team: number;\n}\n\nconst PlayerConverter = {\n  toFirebase(player: Player): PlayerSnapshot {\n    return { uid: player.uid, name: player.name, ready: player.ready, team: player.team };\n  },\n\n  fromFirebase(ref: firebase.database.Reference, data: PlayerSnapshot): Player {\n    return new Player(ref, data.uid, data.name!, data.ready, data.team);\n  }\n};\n\ninterface RoundSnapshot {\n  ownerUid: string;\n  status: RoundState;\n  startedAt: number | null;\n}\n\nconst RoundConverter = {\n  fromFirebase(ref: firebase.database.Reference, data: RoundSnapshot): Round {\n    return new Round(ref, data.ownerUid, data.status, data.startedAt);\n  },\n\n  toFirebase(round: Round): RoundSnapshot {\n    return { ownerUid: round.ownerUid, status: round.status, startedAt: round.startedAt || null };\n  }\n};\n","const places: Set<string> = new Set([\n  \"Ajaccio\",\n  \"Alaska\",\n  \"Alma\",\n  \"Amsterdam\",\n  \"Anchorage\",\n  \"Angleterre\",\n  \"Animalerie\",\n  \"Anticosti\",\n  \"Arabie Saoudite\",\n  \"Arc de Triomphe\",\n  \"Arcade\",\n  \"Argentine\",\n  \"Aréna\",\n  \"Asbestos\",\n  \"Athènes\",\n  \"Austin\",\n  \"Bagdad\",\n  \"Banff\",\n  \"Bar\",\n  \"Barcelone\",\n  \"Belfast\",\n  \"Berlin\",\n  \"Bethléem\",\n  \"Bibliothèque\",\n  \"Big Ben\",\n  \"Biodome\",\n  \"Biosphère\",\n  \"Boston\",\n  \"Bromont\",\n  \"Bruxelles\",\n  \"Brésil\",\n  \"Budapest\",\n  \"Buenos Aires\",\n  \"Burj Khalifa\",\n  \"Cabane à Sucre\",\n  \"Café\",\n  \"Californie\",\n  \"Cambodge\",\n  \"Camping\",\n  \"Canal Rideau\",\n  \"Cancun\",\n  \"Cap-Chat\",\n  \"Casino\",\n  \"Central Park\",\n  \"Centre commercial\",\n  \"Chalet\",\n  \"Charlottetown\",\n  \"Chibougamau\",\n  \"Chicago\",\n  \"Chichén Itzá\",\n  \"Chili\",\n  \"Chutes Montmorency\",\n  \"Cinque Terres\",\n  \"Cinéma\",\n  \"Cinéparc\",\n  \"Colisée\",\n  \"Colorado\",\n  \"Copenhague \",\n  \"Corse\",\n  \"Cuba\",\n  \"Discothèque\",\n  \"Dubai\",\n  \"Dublin\",\n  \"Dépanneur\",\n  \"Edmonton\",\n  \"Empire State Building\",\n  \"Espagne\",\n  \"Fleuriste\",\n  \"Floride\",\n  \"Fontaine de Trévi\",\n  \"Frankfurt\",\n  \"Frédericton\",\n  \"Gapsé\",\n  \"Glasgow\",\n  \"Grand Canyon\",\n  \"Grande Muraille de Chine\",\n  \"Groenland\",\n  \"Ground Zero\",\n  \"Grèce\",\n  \"Halifax\",\n  \"Hawaii\",\n  \"Helsinki\",\n  \"Hiroshima\",\n  \"Hong Kong\",\n  \"Honolulu\",\n  \"Houston\",\n  \"Hôpital\",\n  \"Hôtel\",\n  \"Hôtel de ville\",\n  \"Iqaluit \",\n  \"Irlande\",\n  \"Islande\",\n  \"Israël\",\n  \"Istanbul\",\n  \"Italie\",\n  \"Jeu d'évasion\",\n  \"Johannesburg\",\n  \"Jérusalem\",\n  \"La Havane\",\n  \"La Mecque\",\n  \"La Ronde\",\n  \"La Tuque\",\n  \"Lac Mégantic\",\n  \"Las Vegas\",\n  \"Laval\",\n  \"Lisbonne\",\n  \"Londres\",\n  \"Los Angeles\",\n  \"Luxembourg\",\n  \"Lévis\",\n  \"Machu Picchu\",\n  \"Madrid\",\n  \"Manchester\",\n  \"Maroc\",\n  \"Marrakech\",\n  \"Marseilles\",\n  \"Mexico\",\n  \"Mexique\",\n  \"Miami\",\n  \"Michigan\",\n  \"Mississauga\",\n  \"Monaco\",\n  \"Moncton\",\n  \"Mont Tremblant\",\n  \"Montagne de ski\",\n  \"Montréal\",\n  \"Montréal\",\n  \"Moscou\",\n  \"Mumbai\",\n  \"Mur de Berlin\",\n  \"Musée du Louvres\",\n  \"Musée\",\n  \"Nanaimo\",\n  \"New Delhi\",\n  \"New York\",\n  \"Niagara Falls\",\n  \"Notre-Dame de Paris\",\n  \"Nouvelle-Zélande\",\n  \"Opéra de Sydney\",\n  \"Orégon\",\n  \"Ottawa\",\n  \"Pakistan\",\n  \"Palestine\",\n  \"Parc\",\n  \"Parc à chien\",\n  \"Paris\",\n  \"Partnénon\",\n  \"Percé\",\n  \"Phoenix\",\n  \"Place Rouge\",\n  \"Plage\",\n  \"Pologne\",\n  \"Pompéii\",\n  \"Pont du Golden Gate\",\n  \"Port-au-Prince\",\n  \"Portugal\",\n  \"Prague\",\n  \"Puerto Plata\",\n  \"Pyramides d'Égypte\",\n  \"Pérou\",\n  \"Québec\",\n  \"Restaurant\",\n  \"Rimouski\",\n  \"Rio de Janeiro\",\n  \"Rivière du Loup\",\n  \"Rocher Percé\",\n  \"Rome\",\n  \"Russie\",\n  \"Régina\",\n  \"République Dominicaine\",\n  \"République Tchèque\",\n  \"Réserve faunique\",\n  \"Saint-Pétersbourg\",\n  \"Salon de coiffure\",\n  \"San Francisco\",\n  \"SAQ\",\n  \"Sept Iles\",\n  \"Shawinigan\",\n  \"Sherbrooke\",\n  \"Sibérie\",\n  \"Singapour\",\n  \"St-Jean\",\n  \"Station de métro\",\n  \"Statue de la Liberté\",\n  \"Stockholm\",\n  \"Stonehenge\",\n  \"Suisse\",\n  \"Sydney\",\n  \"Taj Mahal\",\n  \"Tampa Bay\",\n  \"Texas\",\n  \"Time Square\",\n  \"Timmins\",\n  \"Tokio\",\n  \"Toronto\",\n  \"Tour de Pise\",\n  \"Tour du CN\",\n  \"Tour Eiffel\",\n  \"Travail\",\n  \"Trois Rivières\",\n  \"Turquie\",\n  \"Université\",\n  \"Vancouver\",\n  \"Varsovie\",\n  \"Vatican\",\n  \"Venise\",\n  \"Vermont\",\n  \"Victoria\",\n  \"Vietnam\",\n  \"Walt Disney World\",\n  \"Washington\",\n  \"Whitehorse\",\n  \"Winnipeg\",\n  \"Yellowknife\",\n  \"Zoo\",\n  \"Zürich\",\n  \"Écosse\",\n  \"Édimbourg\",\n  \"Épicerie\",\n  \"Île d'Orléans\",\n]);\n\nexport enum Dictionary {\n  PLACES\n}\n\nexport const words = (dict: Dictionary | null): Set<string> => {\n  switch (dict) {\n  case Dictionary.PLACES:\n  case null:\n    return places;\n  }\n};\n","import { ChangeEvent, useEffect, useState } from 'react';\nimport { HashRouter, Link, Redirect, Route, Switch, useHistory, useLocation, useParams } from \"react-router-dom\";\nimport queryString, { ParsedQuery } from 'query-string';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { Button, CardPanel, Card, Preloader, ProgressBar, Row, Select, TextInput, Section, Divider } from 'react-materialize';\nimport { Game, Player, Round, User } from './Models';\nimport { Dictionary, words } from './Words';\nimport './App.css';\nimport 'materialize-css';\n\nconst Colors = {\n  red: '#d50000',\n  blue: '#2962ff',\n  teal: '#2bbbad',\n};\n\nconst Title = ({children}: {children: string}) => {\n  return(\n    <h2 style={{ fontWeight: 'lighter', color: Colors.teal }}>{ children }</h2>\n  );\n};\n\nconst Home = () => {\n  return(\n    <>\n      <Title>Mots Interdits</Title>\n\n      <Section>\n        <Row>\n          <Link to=\"/host\" className=\"waves-effect waves-light btn\" style={{ width: '100%' }}>Créer une partie</Link>\n        </Row>\n        <Row>\n          <Link to=\"/join\" className=\"waves-effect waves-light btn\" style={{ width: '100%' }}>Joindre une partie</Link>\n        </Row>\n      </Section>\n    </>\n  );\n};\n\nenum CreationState {\n  Pending,\n  Creating,\n  Created,\n}\n\nconst Host = ({user}: { user: User }) => {\n  const [creationState, setCreationState] = useState(CreationState.Pending);\n  const [game, setGame] = useState<Game | undefined>();\n\n  useEffect(() => {\n    if (creationState !== CreationState.Pending) { return; }\n\n    setCreationState(CreationState.Creating);\n\n    (async () => {\n      setGame(await Game.create(user));\n\n      setCreationState(CreationState.Created);\n    })();\n  }, []);\n\n  if (creationState === CreationState.Created) {\n    return(\n      <Redirect to={ `/game/${game!.uid}` }></Redirect>\n    );\n  } else {\n    return(\n      <Loading/>\n    );\n  }\n};\n\nconst Error = ({children}: {children: string}) => {\n  return(\n    <Row>\n      <CardPanel className=\"red accent-4\">\n        <span className=\"white-text\">\n          { children }\n        </span>\n      </CardPanel>\n    </Row>\n  );\n};\n\nconst Join = ({user}: {user: User}) => {\n  const history = useHistory();\n  const location = useLocation();\n\n  const [gameID, setGameID] = useState<string>('');\n\n  const joinHandler = () => {\n    history.push(`/game/${ gameID }`);\n  };\n\n  const locationSearch: ParsedQuery<string> = queryString.parse(location.search);\n  const error: string | null = locationSearch.error as string;\n\n  return(\n    <>\n      {\n        !!error && <Error>{ error }</Error>\n      }\n\n      <Row>\n        <TextInput id=\"gameID\" onChange={ event => { setGameID(event.target.value); } } label=\"Identifiant\" noLayout />\n      </Row>\n\n      <Row className=\"row\">\n        <Button onClick={joinHandler} disabled={ gameID.length === 0 }>\n          Joindre la partie\n        </Button>\n      </Row>\n\n      <Row>\n        <Link to=\"/home\">Retour</Link>\n      </Row>\n    </>\n  );\n};\n\nconst Loading = () => {\n  return(\n    <>\n      <Row>\n        <Preloader active flashing size=\"big\" />\n      </Row>\n    </>\n  );\n};\n\ninterface GameRoute {\n  gameID: string;\n}\n\nconst Lobby = ({user, game}: { user: User, game: Game }) => {\n  const currentPlayer = game.playerByUid(user.uid);\n\n  useEffect(() => {\n    if (currentPlayer?.uid !== user.uid && !game.isStarted()) {\n      game.addPlayer(user);\n    };\n  }, [user.uid, game, currentPlayer?.uid]);\n\n  if (currentPlayer) {\n    return <LobbyLoaded user={user} player={currentPlayer} game={game}/>;\n  } else {\n    return <Loading/>;\n  }\n};\n\nconst LobbyPlayersList = ({players}: { players: Array<Player> }) => {\n  if (players.length === 0) {\n    return(\n      <div>\n        Oops! Toujours aucun joueur dans cette équipe. Utilisez Tinder si vous avez besoin d'amis.\n      </div>\n    );\n  }\n\n  return(\n    <div className=\"collection left-align\">\n      {\n        players.map((player) => {\n          return(\n            <div key={player.uid} className=\"collection-item\">\n              { player.name } { player.ready && <span data-badge-caption=\"Prêt!\" className=\"new badge\"></span> }\n            </div>\n          );\n        })\n      }\n    </div>\n  );\n};\n\nconst LobbyLoaded = ({user, player, game}: { user: User, player: Player, game: Game }) => {\n  const allPlayers = game.allPlayers();\n\n  const toggleReadinessHandler = () => {\n    player.update({ ready: !player.ready });\n  };\n\n  const nameChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n    player.update({ name: event.target.value });\n  };\n\n  const roundLengthHandler = (event: ChangeEvent<HTMLSelectElement>) => {\n    game.update({ roundLength: parseInt(event.target.value) });\n  };\n\n  const roundCountHandler = (event: ChangeEvent<HTMLSelectElement>) => {\n    game.update({ roundCount: parseInt(event.target.value) });\n  };\n\n  const joinTeamHandler = (event: ChangeEvent<HTMLSelectElement>) => {\n    player.update({ team: parseInt(event.target.value) });\n  };\n\n  const startGameHandler = () => {\n    game.start();\n  };\n\n  const startButtonStatus: boolean = !game.isOwner(player) || !allPlayers.every((player) => player.ready);\n\n  return(\n    <>\n      {\n        game.isOwner(player) &&\n          <Row>\n            <Card>\n              Invite des gens à joindre cette partie en leur partageant le code <b>{ game.uid }</b>.\n            </Card>\n          </Row>\n      }\n\n      <Section>\n        <Row>\n          <TextInput id=\"name\" value={ player.name } onChange={ nameChangeHandler } disabled={ player.ready } label=\"Nom\" noLayout />\n        </Row>\n\n        <Row>\n          <Select id=\"team\" onChange={  joinTeamHandler } noLayout value={ `${ player.team }` } label=\"Équipe\" disabled={ player.ready }>\n            <option value=\"0\">Équipe Rouge</option>\n            <option value=\"1\">Équipe Bleue</option>\n          </Select>\n        </Row>\n\n        {\n          game.isOwner(player) &&\n            <>\n              <Row>\n                <Select id=\"roundLength\" onChange={ roundLengthHandler } noLayout value={ game.roundLength.toString() } label=\"Durée d'une manche\" disabled={ player.ready }>\n                  <option value=\"5\">5s</option>\n                  <option value=\"60\">60s</option>\n                  <option value=\"90\">90s</option>\n                  <option value=\"120\">120s</option>\n                </Select>\n              </Row>\n\n              <Row>\n                <Select id=\"roundCount\" onChange={ roundCountHandler } noLayout value={ game.roundCount.toString() } label=\"Nombre de manches\" disabled={ player.ready }>\n                  <option value=\"1\">1</option>\n                  <option value=\"4\">4</option>\n                  <option value=\"12\">12</option>\n                  <option value=\"20\">20</option>\n                </Select>\n              </Row>\n            </>\n        }\n\n        <Row>\n          <h5 style={{ fontWeight: 'lighter', color: Colors.red, textAlign: \"left\" }}>Équipe Rouge</h5>\n\n          <LobbyPlayersList players={ allPlayers.filter((player) => player.team === 0) } />\n        </Row>\n\n        <Row>\n          <h5 style={{ fontWeight: 'lighter', color: Colors.blue, textAlign: \"left\" }}>Équipe Bleue</h5>\n\n          <LobbyPlayersList players={ allPlayers.filter((player) => player.team === 1) } />\n        </Row>\n\n        <Row>\n          <Button onClick={ toggleReadinessHandler } disabled={ player.name.length === 0 }>\n            { player.ready ? \"Pas prêt!\" : \"Prêt!\" }\n          </Button>\n\n          <Button onClick={ startGameHandler } disabled={ startButtonStatus } style={{ marginLeft: \"10px\" }}>\n            Débuter!\n          </Button>\n        </Row>\n\n        <Row>\n          <Link to=\"/home\">Retour</Link>\n        </Row>\n      </Section>\n    </>\n  );\n};\n\nconst RoundController = ({ player, game, round }: RoundProps) => {\n  const [timeRemaining, setTimeRemaining] = useState<number>(game.roundLength * 1000);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      const remaining = round.startedAt! + (game.roundLength * 1000) - Date.now();\n\n      setTimeRemaining(remaining);\n\n      if (remaining <= 0) {\n        clearInterval(timer);\n      }\n    }, 50);\n\n    return () => { clearInterval(timer); };\n  }, [round.startedAt, game.roundLength]);\n\n  useEffect(() => {\n    if (timeRemaining <= 0) {\n      round.review();\n    }\n  }, [timeRemaining]);\n\n  const timeRemainingInSeconds = Math.floor(timeRemaining / 1000);\n  const currentTeam = game.playerByUid(round.ownerUid)!.team;\n\n  let component;\n\n  if (round.isOwner(player)) {\n    component = <RoundOwner player={ player } game={ game } round={ round } timeRemaining={ timeRemainingInSeconds } />;\n  } else if (game.playerByUid(round.ownerUid)!.isOnSameTeam(player)) {\n    component = <RoundTeammate player={ player } game={ game } round={ round } timeRemaining={ timeRemainingInSeconds } />;\n  } else {\n    component = <RoundOpponent player={ player } game={ game } round={ round } timeRemaining={ timeRemainingInSeconds } />;;\n  }\n\n  return(\n    <>\n      <h6 style={{ color: currentTeam === 0 ? Colors.red : Colors.blue }} className=\"left-align\">\n        Équipe { currentTeam === 0 ? \"Rouge\" : \"Bleue\" }\n      </h6>\n\n      <Divider />\n\n      <Section>\n        { component }\n      </Section>\n    </>\n  );\n};\n\ninterface RoundProps {\n  player: Player;\n  game: Game;\n  round: Round;\n}\n\nclass RoundProgress {\n  constructor(\n    readonly attemptedWords: Array<{ word: string, guessed: boolean }> = []\n  ) {}\n\n  guessed(word: string): RoundProgress {\n    return new RoundProgress(this.attemptedWords.concat({word, guessed: true}));\n  }\n\n  skipped(word: string): RoundProgress {\n    return new RoundProgress(this.attemptedWords.concat({word, guessed: false}));\n  }\n}\n\ninterface NonOwnerRoundProps {\n  player: Player;\n  game: Game;\n  round: Round;\n  timeRemaining: number;\n}\n\nconst RoundTeammate = ({ player, game, round, timeRemaining }: NonOwnerRoundProps) => {\n  if (round.isPending()) {\n    return(\n      <Row>\n        C'est à ton équipe de jouer! { game.playerByUid(round.ownerUid)!.name } va tenter de vous faire deviner\n        un maximum de mots en { game.roundLength } secondes. Bonne chance!\n      </Row>\n    );\n  } else if (round.isRunning()) {\n    return(\n      <TimeRemaining timeRemaining={ timeRemaining } totalTime={ game.roundLength } />\n    );\n  } else if (round.isReview()) {\n    return(\n      <Row>\n        Beau travail! Ou pas. J'en sais rien. { game.playerByUid(round.ownerUid)!.name } est en train de valider\n        les résultats, après quoi c'est au tour de l'équipe adverse. Dites-lui de se dépêcher.\n      </Row>\n    );\n  } else {\n    return(\n      <div className=\"row\">\n        <h5>\n          Oops! Cette manche est terminée.\n        </h5>\n      </div>\n    );\n  }\n};\n\nconst RoundOpponent = ({player, game, round, timeRemaining}: NonOwnerRoundProps) => {\n  if (round.isPending()) {\n    const funnyThingsToSay: Array<string> = [\n      \" C'est le temps de faire une pause pipi.\",\n      \" C'est le temps de te servir un verre.\",\n      \" Si t'as du lavage à faire, c'est le temps.\",\n      \" Tournes-toi les pouces.\",\n      \" Sois prêt pour la prochaine manche!\",\n      \" D'ici là, t'as rien à faire.\"\n    ];\n\n    return(\n      <div className=\"row\">\n        C'est à l'autre équipe de jouer. Ils vont tenter de deviner un maximum de mots en { game.roundLength } secondes.\n        { funnyThingsToSay[Math.floor(Math.random() * Math.floor(funnyThingsToSay.length))] }\n      </div>\n    );\n  } else if (round.isRunning()) {\n    return(\n      <TimeRemaining totalTime={ game.roundLength } timeRemaining={ timeRemaining } />\n    );\n  } else if (round.isReview()) {\n    return(\n      <div className=\"row\">\n        <h5>\n          Terminé! { game.playerByUid(round.ownerUid)!.name } est en train de valider\n          les résultats de leur équipe, après quoi c'est votre tour!\n        </h5>\n      </div>\n    );\n  } else {\n    return(\n      <div className=\"row\">\n        <h5>\n          Oops! Cette manche est terminée.\n        </h5>\n      </div>\n    );\n  }\n};\n\ninterface OwnerRoundProps {\n  player: Player;\n  game: Game;\n  round: Round;\n  timeRemaining: number;\n}\n\nconst RoundOwner = ({ player, game, round, timeRemaining }: OwnerRoundProps) => {\n  const [roundProgress, setRoundProgress] = useState<RoundProgress>(new RoundProgress());\n\n  if (round.isReview()) {\n    return <RoundOwnerRecap game={ game } round={ round } words={ roundProgress.attemptedWords } />;\n  } else if (round.isRunning()) {\n    return <RoundOwnerRunning game={ game } round={ round } roundProgress={ roundProgress } setRoundProgress={ setRoundProgress } timeRemaining={timeRemaining} />;\n  } else {\n    return(\n      <>\n        <Row>\n          C'est à ton tour. Tu as { game.roundLength } secondes pour faire deviner un maximum\n          de mots à { game.teammatesOf(player).map((p) => p.name).join(', ') }.\n        </Row>\n\n        <Row>\n          <Button onClick={ () => { round.start(); } }>\n            Débuter!\n          </Button>\n        </Row>\n      </>\n    );\n  }\n};\n\ninterface RoundOwnerRecapProps {\n  game: Game;\n  round: Round;\n  words: { word: string, guessed: boolean }[];\n};\n\nconst RoundOwnerRecap = ({ game, round, words }:  RoundOwnerRecapProps) => {\n  const successfullyGuessedWords = words.filter((word) => word.guessed);\n\n  const continueHandler = () => {\n    round.complete(successfullyGuessedWords.map((word) => word.word));\n    game.continue();\n  };\n\n  return (\n    <>\n      <Row>\n        Bravo champion! Tu as trouvé { successfullyGuessedWords.length } mots!\n      </Row>\n\n      {\n        !!successfullyGuessedWords.length &&\n          <div className=\"collection left-align hoverable\">\n            {\n              words.map((word) => {\n                return(\n                  <div key={ word.word } className=\"collection-item\">\n                    { word.word }\n\n                    {\n                      word.guessed\n                        ? <span data-badge-caption=\"Réussi\" className=\"new badge\"></span>\n                        : <span data-badge-caption=\"Rejeté\" className=\"red new badge\"></span>\n                    }\n                  </div>\n                );\n              })\n            }\n          </div>\n      }\n\n      <Row>\n        <Button onClick={ continueHandler }>\n          Continuer\n        </Button>\n      </Row>\n    </>\n  );\n};\n\nconst randomWordExcept = (fromSource: Set<string>, except: Set<string>): string => {\n  const difference: Set<string> = new Set(fromSource);\n  for (let elem of except) {\n    difference.delete(elem);\n  }\n  const asArray = Array.from(difference);\n  return asArray[Math.floor(Math.random() * Math.floor(asArray.length))]!;\n};\n\ninterface RoundOwnerRunningProps {\n  game: Game;\n  round: Round;\n  roundProgress: RoundProgress;\n  timeRemaining: number;\n  setRoundProgress: (roundProgress: RoundProgress) => void;\n}\n\nconst TimeRemaining = ({timeRemaining, totalTime} : { timeRemaining: number, totalTime: number }) => {\n  return(\n    <>\n      <h5>\n        Il reste { timeRemaining } secondes\n      </h5>\n\n      <ProgressBar progress={ Math.ceil((totalTime - timeRemaining) / totalTime * 100) } />\n    </>\n  );\n};\n\nconst RoundOwnerRunning = ({ game, round, roundProgress, timeRemaining, setRoundProgress }: RoundOwnerRunningProps) => {\n  const [currentWord, setCurrentWord] = useState<string>(randomWordExcept(words(Dictionary.PLACES), new Set(game.guessedWords())));\n\n  const pickNewCurrentWord = (newRoundProgress: RoundProgress) => {\n    const newCurrentWord = randomWordExcept(words(Dictionary.PLACES), new Set(game.guessedWords().concat(newRoundProgress.attemptedWords.map(({word}) => word))));\n    setCurrentWord(newCurrentWord);\n  };\n\n  const guessedHandler = () => {\n    const newRoundProgress = roundProgress.guessed(currentWord);\n    setRoundProgress(newRoundProgress);\n    pickNewCurrentWord(newRoundProgress);\n  };\n\n  const skipHandler = () => {\n    const newRoundProgress = roundProgress.skipped(currentWord);\n    setRoundProgress(newRoundProgress);\n    pickNewCurrentWord(newRoundProgress);\n  };\n\n  return (<>\n    <Row>\n      <TimeRemaining totalTime={ game.roundLength } timeRemaining={ timeRemaining } />\n    </Row>\n\n    <Row>\n      <CardPanel className=\"teal white-text hoverable\">\n        <h4 style={{ padding: 0, margin: 0 }}>{ currentWord }</h4>\n      </CardPanel>\n    </Row>\n\n    <Row>\n      <Button onClick={ guessedHandler }>\n        Réussi!\n      </Button>\n      <Button onClick={ skipHandler } style={{ marginLeft: \"10px\" }} className={ \"red\" }>\n        Rejeter\n      </Button>\n    </Row>\n  </>);\n};\n\nconst GameController = ({user}: {user: User}) => {\n  const { gameID } = useParams<GameRoute>();\n\n  const [game, setGame] = useState<Game | null>(null);\n  const [error, setError] = useState<string>('');\n\n  useEffect(() => {\n    const ref = Game.subscribe(gameID, (newGame) => {\n      if (newGame) {\n        setGame(newGame);\n      } else {\n        setError(\"Cette partie n'est plus disponible\");\n      }\n    });\n\n    return () => {\n      ref.off();\n    };\n  }, [gameID]);\n\n  if (error) {\n    return(<Redirect to={ `/join?error=${error}` }></Redirect>);\n  } else if (!game) {\n    return (<Loading/>);\n  } else if (game.isCompleted()) {\n    return (<>C'est fini</>);\n  } else if (game.isStarted()) {\n    const player = game.playerByUid(user.uid)!;\n    const round = game.currentRound()!;\n\n    if (player) {\n      return <RoundController round={round} game={game} player={player}/>;\n    } else {\n      return <AlreadyStartedGame />;\n    }\n  } else {\n    return(<Lobby user={user} game={game} />);\n  }\n};\n\nconst AlreadyStartedGame = () => {\n  return (\n    <>\n      <h1>⚠️</h1>\n\n      <Row>\n        Désolé, tes amis de t'on pas attendu, la partie est déjà en cours.\n      </Row>\n\n      <Row>\n        <Link to=\"/home\">Retour</Link>\n      </Row>\n    </>\n  );\n};\n\nconst App = () => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    firebase.auth().signInAnonymously().then(data => setUser(data.user));\n  }, []);\n\n  if (!user) {\n    return <Loading/>;\n  } else {\n    return (\n      <HashRouter>\n        <Switch>\n          <Route path=\"/join\" render={(props) => <Join {...props} user={user} />} />\n          <Route path=\"/host\" render={(props) => <Host {...props} user={user}/>}/>\n          <Route path=\"/game/:gameID\" render={(props) => <GameController {...props} user={user}/>}/>\n          <Route path=\"/\" component={Home}/>\n        </Switch>\n      </HashRouter>\n    );\n  }\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport firebase from 'firebase/app';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyBElBT0EATGzckFNUZ69M-CKcIq0VynO08\",\n  authDomain: \"justone-7ffe6.firebaseapp.com\",\n  projectId: \"justone-7ffe6\",\n  storageBucket: \"justone-7ffe6.appspot.com\",\n  databaseURL: \"https://justone-7ffe6-default-rtdb.firebaseio.com/\",\n  messagingSenderId: \"107210378075\",\n  appId: \"1:107210378075:web:5ad604222f2ad1d8a2687e\"\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('app')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}