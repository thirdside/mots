{"version":3,"sources":["Models.tsx","Words.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RoundState","randomName","potentialNames","Math","floor","random","length","Player","ref","uid","name","ready","team","props","this","update","Object","assign","constructor","otherPlayer","Dictionary","Game","ownerUid","players","roundLength","roundCount","startedAt","completedAt","rounds","owner","newUid","toString","replace","substr","toLowerCase","firebase","database","game","Map","set","GameConverter","toFirebase","gameUid","callback","on","gameSnapshot","val","fromFirebase","get","Array","from","values","originalPlayer","allPlayers","filter","player","otherPlayers","isOnSameTeam","user","isStarted","child","PlayerConverter","previousRoundOwnerUid","currentRound","allPlayerIds","keys","newRoundOwner","previousRoundOwner","playerByUid","opponents","opponentsOf","teammates","teammatesOf","Round","push","Pending","newRound","key","RoundConverter","Date","now","reduce","memo","round","concat","words","word","guessed","map","scores","guessedWords","teamNumber","teamScores","status","Running","Completed","Review","data","entries","snapshot","places","Set","CreationState","Colors","Title","children","style","fontWeight","color","Home","to","className","width","Host","useState","creationState","setCreationState","setGame","useEffect","Creating","a","create","Created","Error","Join","history","useHistory","location","useLocation","gameID","setGameID","error","queryString","parse","search","id","onChange","event","target","value","label","noLayout","large","onClick","disabled","Loading","active","flashing","size","Lobby","currentPlayer","addPlayer","LobbyPlayersList","newIcon","caption","LobbyLoaded","startButtonStatus","isOwner","every","parseInt","textAlign","start","marginLeft","RoundController","timeRemaining","setTimeRemaining","timer","setInterval","remaining","clearInterval","review","component","timeRemainingInSeconds","roundOwner","RoundProgress","attemptedWords","RoundTeammate","isPending","isRunning","totalTime","RoundOpponent","funnyThingsToSay","RoundOwner","roundProgress","setRoundProgress","isReview","RoundOwnerRecap","congratulation","setWords","guessedWordsCount","flippedWord","complete","continue","WordCollection","userSelect","textDecorationLine","TimeRemaining","progress","ceil","RoundOwnerRunning","pickNextWord","fromSource","except","difference","elem","delete","asArray","randomWordExcept","dict","PLACES","currentWord","setCurrentWord","padding","margin","newRoundProgress","skipped","GameController","useParams","setError","subscribe","newGame","off","isCompleted","CompletedGame","bannerComponent","opponentTeam","paddingBottom","s","borderRadius","index","AlreadyStartedGame","App","setUser","auth","signInAnonymously","then","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initializeApp","apiKey","authDomain","projectId","storageBucket","databaseURL","messagingSenderId","appId","ReactDOM","StrictMode","document","getElementById"],"mappings":"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IiC,EAAkB,CACtBpB,WADsB,SACXc,GACT,MAAO,CAAE9C,IAAK8C,EAAO9C,IAAKC,KAAM6C,EAAO7C,KAAMC,MAAO4C,EAAO5C,MAAOC,KAAM2C,EAAO3C,OAGjFmC,aALsB,SAKTvC,EAAkCyF,GAC7C,OAAO,IAAI1F,EAAOC,EAAKyF,EAAKxF,IAAKwF,EAAKvF,KAAOuF,EAAKtF,MAAOsF,EAAKrF,QAY5DkE,EAAiB,CACrB/B,aADqB,SACRvC,EAAkCyF,GAC7C,OAAO,IAAIxB,EAAMjE,EAAKyF,EAAK3E,SAAU2E,EAAKJ,OAAQI,EAAKvE,UAAWuE,EAAKtE,YAAasE,EAAKZ,QAG3F5C,WALqB,SAKV0C,GACT,MAAO,CAAE7D,SAAU6D,EAAM7D,SAAUuE,OAAQV,EAAMU,OAAQnE,UAAWyD,EAAMzD,WAAa,QCrXrF0E,EAAsB,IAAIC,IAAI,CAClC,UACA,WACA,UACA,SACA,YACA,OACA,QACA,WACA,YACA,YACA,aACA,aACA,aACA,YACA,kBACA,kBACA,SACA,YACA,UACA,WACA,WACA,aACA,SACA,YACA,cACA,SACA,UACA,QACA,UACA,mBACA,gBACA,cACA,MACA,UACA,UACA,YACA,SACA,UACA,SACA,cACA,kBACA,UACA,UACA,UACA,eACA,UACA,YACA,SACA,YACA,cACA,UACA,YACA,UACA,YACA,YACA,YACA,WACA,eACA,kBACA,kBACA,wBACA,eACA,OACA,oBACA,oBACA,UACA,mBACA,aACA,WACA,UACA,eACA,kBACA,SACA,gBACA,WACA,wBACA,kBACA,SACA,YACA,eACA,cACA,oBACA,eACA,SACA,WACA,aACA,gBACA,UACA,wBACA,kBACA,cACA,UACA,qBACA,QACA,QACA,iBACA,mBACA,eACA,qBACA,uBACA,qBACA,eACA,gBACA,YACA,cACA,WACA,aACA,uBACA,WACA,WACA,cACA,kBACA,aACA,aACA,QACA,mBACA,aACA,SACA,oBACA,YACA,eACA,WACA,OACA,sBACA,iBACA,eACA,SACA,WACA,SACA,aACA,iBACA,QACA,SACA,eACA,sBACA,WACA,wBACA,UACA,mBACA,SACA,wBACA,yBACA,qBACA,+BACA,YACA,WACA,UACA,uBACA,YACA,YACA,iBACA,WACA,SACA,cACA,UACA,OACA,eACA,aACA,2BACA,YACA,cACA,WACA,MACA,UACA,SACA,WACA,WACA,YACA,WACA,YACA,WACA,UACA,aACA,oBACA,WACA,WACA,OACA,cACA,UACA,UACA,UACA,YACA,WACA,SACA,QACA,oBACA,mBACA,kBACA,eACA,eACA,aACA,QACA,WACA,QACA,UACA,iBACA,YACA,YACA,WACA,WACA,aACA,kBACA,YACA,cACA,QACA,QACA,YACA,WACA,UACA,cACA,WACA,aACA,WACA,eACA,SACA,iBACA,aACA,YACA,mBACA,oBACA,uBACA,sBACA,SACA,QACA,YACA,aACA,qBACA,WACA,YACA,MACA,SACA,UACA,QACA,WACA,YACA,cACA,SACA,UACA,cACA,aACA,iBACA,kBACA,cACA,mBACA,SACA,aACA,QACA,SACA,gBACA,kBACA,WACA,UACA,UACA,YACA,YACA,WACA,gBACA,UACA,sBACA,sBACA,UACA,cACA,kBACA,qBACA,WACA,qBACA,gBACA,gBACA,YACA,SACA,YACA,WACA,uBACA,YACA,aACA,cACA,kBACA,OACA,QACA,eACA,YACA,aACA,YACA,WACA,YACA,UACA,sBACA,UACA,cACA,cACA,iBACA,QACA,iBACA,eACA,UACA,aACA,iBACA,uBACA,iBACA,sBACA,iBACA,WACA,kBACA,SACA,oBACA,WACA,aACA,cACA,eACA,wBACA,YACA,cACA,kBACA,WACA,qBACA,YACA,iBACA,UACA,gBACA,YACA,eACA,WACA,2BACA,aACA,WACA,iBACA,qBACA,kBACA,YACA,OACA,SACA,YACA,4BACA,2BACA,sBACA,OACA,MACA,uBACA,uBACA,mBACA,oBACA,oBACA,qBACA,iBACA,gBACA,cACA,YACA,YACA,aACA,aACA,aACA,SACA,SACA,YACA,MACA,UACA,UACA,sBACA,YACA,sBACA,kBAC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","file":"static/js/main.59138a4d.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\nexport interface User {\n  uid: string;\n}\n\nconst randomName = (): string => {\n  const potentialNames: Array<string> = [\n    'Quasimodo',\n    'Rococo',\n    'Pistache',\n    'Frimousse',\n    'Boubou',\n    'Boucle d\\'Or',\n    'Yvon Tremblay',\n    'Tim Hagine',\n    'Sam Pique',\n    'Paul Ution',\n    'Pacôme les Autres',\n    'Marc des Points',\n    'Lara Tatouille',\n    'Kelly Diote',\n    'Alan Foiré',\n    'Alex Trémité',\n    'Marie Rouana',\n    'Aude Vaisselle',\n    'Nordine Ateur',\n    'Oussama Férir',\n    'Phil Danstachambre',\n    'Edith Orial',\n    'Ella de Bonzieux',\n    'Eva Pisser',\n    'Sarah Croche',\n    'Sylvie Bromasseur',\n    'Henri Hencor',\n    'Jacques Célère',\n    'Jamal Partout',\n    'Jean Cérien'\n  ];\n\n  return potentialNames[Math.floor(Math.random() * Math.floor(potentialNames.length))];\n};\n\nexport class Player {\n  constructor(\n    readonly ref: firebase.database.Reference,\n    readonly uid: string,\n    readonly name: string,\n    readonly ready: boolean,\n    readonly team: number = 0\n  ) {}\n\n  async update(props: {name?: string, ready?: boolean, team?: number}): Promise<Player> {\n    await this.ref.update(props);\n    // @ts-ignore\n    return Object.assign(new this.constructor(), { ...this, ...props });\n  }\n\n  isOnSameTeam(otherPlayer: Player) {\n    return this.team === otherPlayer.team;\n  }\n}\n\nconst randomGameID = (): string => {\n  return Math\n    .random()\n    .toString(36)\n    .replace(/[^a-z]+/g, '')\n    .substr(0, 4)\n    .toLowerCase();\n};\n\nenum RoundState {\n  Pending,\n  Running,\n  Review,\n  Completed,\n}\n\nexport class Game {\n  static async create(owner: User): Promise<Game> {\n    const newUid = randomGameID();\n    const ref = firebase.database().ref('games/' + newUid);\n    const game = new Game(ref, newUid, owner.uid, new Map(), 20, 12);\n    await ref.set(GameConverter.toFirebase(game));\n\n    return game;\n  }\n\n  static subscribe(gameUid: string, callback: (newGame: Game | null) => void): firebase.database.Reference {\n    const ref = firebase.database().ref('games/' + gameUid);\n\n    ref.on('value', (gameSnapshot) => {\n      const val: GameSnapshot = gameSnapshot.val();\n\n      if (val) {\n        callback(GameConverter.fromFirebase(ref, val));\n      } else {\n        callback(null);\n      }\n    });\n\n    return ref;\n  }\n\n  constructor(\n    readonly ref: firebase.database.Reference,\n    readonly uid: string,\n    readonly ownerUid: string,\n    readonly players: Map<string, Player>,\n    readonly roundLength: number,\n    readonly roundCount: number,\n    readonly startedAt: number | null = null,\n    readonly completedAt: number | null = null,\n    readonly rounds: Array<Round> = [],\n  ) {}\n\n  async update(props: { roundLength?: number, roundCount?: number, completedAt?: number }): Promise<Player> {\n    await this.ref.update(props);\n    // @ts-ignore\n    return Object.assign(new this.constructor(), { ...this, ...props });\n  }\n\n  playerByUid(uid: string): Player | undefined {\n    return this.players.get(uid);\n  }\n\n  allPlayers(): Array<Player> {\n    return Array.from(this.players.values());\n  }\n\n  otherPlayers(originalPlayer: Player): Array<Player> {\n    return this.allPlayers().filter((player) => player.uid !== originalPlayer.uid);\n  }\n\n  teammatesOf(originalPlayer: Player): Array<Player> {\n    return this.otherPlayers(originalPlayer).filter((player) => originalPlayer.isOnSameTeam(player));\n  }\n\n  opponentsOf(originalPlayer: Player): Array<Player> {\n    return this.otherPlayers(originalPlayer).filter((player) => !originalPlayer.isOnSameTeam(player));\n  }\n\n  isOwner(player: Player): boolean {\n    return player.uid === this.ownerUid;\n  }\n\n  isStarted(): boolean {\n    return !!this.startedAt;\n  }\n\n  async addPlayer(user: User): Promise<Player> {\n    if (this.isStarted()) {\n      throw \"this game has already started\";\n    }\n\n    const ref = this.ref.child(`players/${user.uid}`);\n\n    const player = new Player(ref, user.uid, randomName(), false, this.allPlayers().length % 2);\n\n    await ref.set(PlayerConverter.toFirebase(player));\n\n    return player;\n  }\n\n  private newRound(): Round {\n    let previousRoundOwnerUid: string;\n    if (this.currentRound()) {\n      previousRoundOwnerUid = this.currentRound()!.ownerUid!;\n    } else {\n      const allPlayerIds = Array.from(this.players.keys());\n      previousRoundOwnerUid = allPlayerIds[Math.floor(Math.random() * Math.floor(allPlayerIds.length))]!;\n    }\n\n    const previousRoundOwner = this.playerByUid(previousRoundOwnerUid)!;\n    const opponents = this.opponentsOf(previousRoundOwner);\n    const teammates = this.teammatesOf(previousRoundOwner);\n\n    let newRoundOwner: Player;\n    if (opponents.length) {\n      newRoundOwner = opponents[Math.floor(this.rounds.length / 2) % opponents.length];\n    } else if (teammates.length) {\n      newRoundOwner = teammates[Math.floor(this.rounds.length / 2) % teammates.length];\n    } else {\n      newRoundOwner = previousRoundOwner;\n    }\n\n    return new Round(this.ref.child(\"rounds\").push(), newRoundOwner.uid, RoundState.Pending);\n  }\n\n  async start(): Promise<null> {\n    const newRound = this.newRound();\n    let rounds: { [key: string]: any } = {};\n    rounds[newRound.ref.key!] = RoundConverter.toFirebase(newRound);\n\n    return await this.ref.update({ startedAt: Date.now(), rounds: rounds });\n  }\n\n  async continue(): Promise<null> {\n    if (this.rounds.length < this.roundCount) {\n      const newRound = this.newRound();\n      return await newRound.ref.set(RoundConverter.toFirebase(newRound));\n    } else {\n      await this.update({ completedAt: Date.now() });\n      return null;\n    }\n  }\n\n  currentRound(): Round | undefined {\n    return this.rounds[this.rounds.length - 1];\n  }\n\n  words(): Array<Word> {\n    return this.rounds.reduce((memo: Array<Word>, round) => memo.concat(round.words, []), []);\n  }\n\n  guessedWords(): Array<string> {\n    return this.words().filter((word) => word.guessed).map((word) => word.word);\n  }\n\n  isCompleted() {\n    return !!this.completedAt;\n  }\n\n  teamScores(): [number, number] {\n    return(\n      this.rounds.reduce((scores, round) => {\n        const player = this.playerByUid(round.ownerUid)!;\n        scores[player.team!] += round.guessedWords().length;\n        return scores;\n      }, [0, 0])\n    );\n  }\n\n  teamScore(teamNumber: number): number {\n    return this.teamScores()[teamNumber];\n  }\n}\n\ninterface Word {\n  word: string;\n  guessed: boolean;\n}\n\nexport class Round {\n  readonly words: Array<Word>;\n\n  constructor(\n    readonly ref: firebase.database.Reference,\n    readonly ownerUid: string,\n    readonly status: RoundState,\n    readonly startedAt?: number | null,\n    readonly completedAt?: number | null,\n    words?: Array<Word>,\n  ) {\n    this.words = words || [];\n  };\n\n  isOwner(player: Player) {\n    return player.uid === this.ownerUid;\n  }\n\n  isRunning(): boolean {\n    return this.status === RoundState.Running;\n  }\n\n  isCompleted(): boolean {\n    return this.status === RoundState.Completed;\n  }\n\n  isPending(): boolean {\n    return this.status === RoundState.Pending;\n  }\n\n  isReview(): boolean {\n    return this.status === RoundState.Review;\n  }\n\n  guessedWords(): Array<string> {\n    return(this.words.filter((word) => word.guessed).map((word) => word.word));\n  }\n\n  async update(props: {startedAt?: number, completedAt?: number, status?: RoundState, words?: Array<Word>}): Promise<Round> {\n    await this.ref.update(props);\n    // @ts-ignore\n    return Object.assign(new this.constructor(), { ...this, ...props });\n  }\n\n  async start(): Promise<Round> {\n    return await this.update({ status: RoundState.Running, startedAt: Date.now() });\n  }\n\n  async review(): Promise<Round> {\n    return await this.update({ status: RoundState.Review });\n  }\n\n  async complete(words: Array<Word>): Promise<Round> {\n    return await this.update({ status: RoundState.Completed, completedAt: Date.now(), words: words });\n  }\n}\n\ninterface PlayerMap {\n  [key: string]: PlayerSnapshot;\n}\n\ninterface RoundMap {\n  [key: string]: RoundSnapshot;\n}\n\ninterface GameSnapshot {\n  uid: string;\n  ownerUid: string;\n  roundLength: number;\n  roundCount: number,\n  players?: PlayerMap;\n  rounds?: RoundMap;\n  startedAt: number | null;\n  completedAt: number | null;\n}\n\nconst GameConverter = {\n  toFirebase(game: Game): GameSnapshot {\n    return { uid: game.uid, ownerUid: game.ownerUid, startedAt: game.startedAt, completedAt: game.completedAt, roundLength: game.roundLength, roundCount: game.roundCount };\n  },\n\n  fromFirebase(ref: firebase.database.Reference, data: GameSnapshot): Game {\n    const players: Array<[string, Player]> =\n      Object\n        .entries(data.players || {})\n        .map(([uid, snapshot]) => {\n          return [uid, PlayerConverter.fromFirebase(ref.child(`players/${snapshot.uid}`), snapshot)];\n        });\n\n    const rounds = Object.entries(data.rounds || {}).map(([key, snapshot]) => {\n      return RoundConverter.fromFirebase(ref.child(`rounds/${key}`), snapshot);\n    });\n\n    return new Game(ref, data.uid, data.ownerUid, new Map(players), data.roundLength, data.roundCount, data.startedAt, data.completedAt, rounds);\n  }\n};\n\ninterface PlayerSnapshot {\n  uid: string;\n  name: string | null;\n  ready: boolean;\n  team: number;\n}\n\nconst PlayerConverter = {\n  toFirebase(player: Player): PlayerSnapshot {\n    return { uid: player.uid, name: player.name, ready: player.ready, team: player.team };\n  },\n\n  fromFirebase(ref: firebase.database.Reference, data: PlayerSnapshot): Player {\n    return new Player(ref, data.uid, data.name!, data.ready, data.team);\n  }\n};\n\ninterface RoundSnapshot {\n  ownerUid: string;\n  status: RoundState;\n  startedAt: number | null;\n  completedAt?: number | null;\n  words?: Array<Word>;\n}\n\nconst RoundConverter = {\n  fromFirebase(ref: firebase.database.Reference, data: RoundSnapshot): Round {\n    return new Round(ref, data.ownerUid, data.status, data.startedAt, data.completedAt, data.words);\n  },\n\n  toFirebase(round: Round): RoundSnapshot {\n    return { ownerUid: round.ownerUid, status: round.status, startedAt: round.startedAt || null };\n  }\n};\n","const places: Set<string> = new Set([\n  \"Abitibi\",\n  \"Acapulco\",\n  \"Ajaccio\",\n  \"Alaska\",\n  \"Allemagne\",\n  \"Alma\",\n  \"Alpes\",\n  \"Amazonie\",\n  \"Amsterdam\",\n  \"Anchorage\",\n  \"Angleterre\",\n  \"Animalerie\",\n  \"Antartique\",\n  \"Anticosti\",\n  \"Arabie Saoudite\",\n  \"Arc de Triomphe\",\n  \"Arcade\",\n  \"Argentine\",\n  \"Arizona\",\n  \"Aréna\",\n  \"Asbestos\",\n  \"Athènes\",\n  \"Austin\",\n  \"Australie\",\n  \"Aéroport\",\n  \"Bagdad\",\n  \"Bahamas\",\n  \"Banff\",\n  \"Bangkok\",\n  \"Banque Nationale\",\n  \"Banque Royale\",\n  \"Bar laitier\",\n  \"Bar\",\n  \"Barbade\",\n  \"Barbier\",\n  \"Barcelone\",\n  \"Bateau\",\n  \"Belfast\",\n  \"Berlin\",\n  \"Bethléem\",\n  \"Bibliothèque\",\n  \"Big Ben\",\n  \"Billard\",\n  \"Biodome\",\n  \"Biosphère\",\n  \"Bolivie\",\n  \"Bora bora\",\n  \"Boston\",\n  \"Boucherie\",\n  \"Boulangerie\",\n  \"Boulder\",\n  \"Brasserie\",\n  \"Bromont\",\n  \"Bruxelles\",\n  \"Brésil\",\n  \"Buanderie\",\n  \"Budapest\",\n  \"Buenos Aires\",\n  \"Bureau d'avocat\",\n  \"Bureau de poste\",\n  \"Bureau des passeports\",\n  \"Burj Khalifa\",\n  \"CLSC\",\n  \"Cabane à Sucre\",\n  \"Cabane à sucre\",\n  \"Café\",\n  \"Caisse populaire\",\n  \"Californie\",\n  \"Cambodge\",\n  \"Camping\",\n  \"Canal Rideau\",\n  \"Canal de Panama\",\n  \"Cancun\",\n  \"Cap Canaveral\",\n  \"Cap-Chat\",\n  \"Carnaval de Québec\",\n  \"Carnaval de Rio\",\n  \"Casino\",\n  \"Cayo Coco\",\n  \"Central Park\",\n  \"Centre Bell\",\n  \"Centre commercial\",\n  \"Centre-Ville\",\n  \"Chalet\",\n  \"Chamonix\",\n  \"Charlevoix\",\n  \"Charlottetown\",\n  \"Chasser\",\n  \"Chateau de Versailles\",\n  \"Chez le docteur\",\n  \"Chibougamau\",\n  \"Chicago\",\n  \"Chichén Itzá\",\n  \"Chili\",\n  \"Chine\",\n  \"Chiropraticien\",\n  \"Chocolat Favoris\",\n  \"Chocolaterie\",\n  \"Chutes Montmorency\",\n  \"Château Frontenac\",\n  \"Château Laurier\",\n  \"Cimetière\",\n  \"Cinque Terres\",\n  \"Cinéma\",\n  \"Cinéparc\",\n  \"Club Med\",\n  \"Colisée\",\n  \"Colombie Britannique\",\n  \"Colombie\",\n  \"Colorado\",\n  \"Compostelle\",\n  \"Concessionnaire\",\n  \"Copenhague\",\n  \"Cordonnier\",\n  \"Corse\",\n  \"Corée du Nord\",\n  \"Costa Rica\",\n  \"Costco\",\n  \"Cours de natation\",\n  \"Couturier\",\n  \"Croisière\",\n  \"Crête\",\n  \"Cuba\",\n  \"Cueillir des pommes\",\n  \"Côte d'Azur\",\n  \"Côte-Nord\",\n  \"Danser\",\n  \"Dentiste\",\n  \"Denver\",\n  \"Desjardins\",\n  \"Discothèque\",\n  \"Dubai\",\n  \"Dublin\",\n  \"Dépanneur\",\n  \"Désert du Sahara\",\n  \"Edmonton\",\n  \"Empire State Building\",\n  \"Espagne\",\n  \"Esthéticienne\",\n  \"Estrie\",\n  \"Faire de la motoneige\",\n  \"Faire de la plongée\",\n  \"Festival de Cannes\",\n  \"Festival des Mongolfières\",\n  \"Fleuriste\",\n  \"Florence\",\n  \"Floride\",\n  \"Fontaine de Trévi\",\n  \"Frankfurt\",\n  \"Fruiterie\",\n  \"Frédericton\",\n  \"Gapsé\",\n  \"Garage\",\n  \"Gaspésie\",\n  \"Glasgow\",\n  \"Golf\",\n  \"Grand Canyon\",\n  \"Grand Prix\",\n  \"Grande Muraille de Chine\",\n  \"Groenland\",\n  \"Ground Zero\",\n  \"Grèce\",\n  \"Gym\",\n  \"Halifax\",\n  \"Hawaii\",\n  \"Helsinki\",\n  \"Himalaya\",\n  \"Hiroshima\",\n  \"Hollande\",\n  \"Hong Kong\",\n  \"Honolulu\",\n  \"Houston\",\n  \"Hôpital\",\n  \"Hôtel de ville\",\n  \"Hôtel\",\n  \"Hôtel\",\n  \"Ikea\",\n  \"Insectarium\",\n  \"Iqaluit\",\n  \"Irlande\",\n  \"Islande\",\n  \"Israël\",\n  \"Istanbul\",\n  \"Italie\",\n  \"Japon\",\n  \"Jardin Botannique\",\n  \"Jeu d'évasion\",\n  \"Jeux Olympiques\",\n  \"Johannesburg\",\n  \"Jérusalem\",\n  \"Karaoké\",\n  \"Kayak\",\n  \"Kuujjuaq\",\n  \"Kyoto\",\n  \"La Baie\",\n  \"La Grande Roue\",\n  \"La Havane\",\n  \"La Mecque\",\n  \"La Ronde\",\n  \"La Tuque\",\n  \"Lac Louise\",\n  \"Lac Mégantic\",\n  \"Las Vegas\",\n  \"Laurentides\",\n  \"Laval\",\n  \"Laval\",\n  \"Lave auto\",\n  \"Lisbonne\",\n  \"Londres\",\n  \"Los Angeles\",\n  \"Lousiane\",\n  \"Luxembourg\",\n  \"Lévis\",\n  \"Machu Picchu\",\n  \"Madrid\",\n  \"Maison Blanche\",\n  \"Manchester\",\n  \"Manhattan\",\n  \"Manoir Richelieu\",\n  \"Marché Atwater\",\n  \"Marché Jean-Talon\",\n  \"Marché aux puces\",\n  \"Marina\",\n  \"Maroc\",\n  \"Marrakech\",\n  \"Marseilles\",\n  \"Massothérapeute\",\n  \"McDonald\",\n  \"Mer Morte\",\n  \"Mer\",\n  \"Mexico\",\n  \"Mexique\",\n  \"Miami\",\n  \"Michigan\",\n  \"Mini Putt\",\n  \"Mississauga\",\n  \"Monaco\",\n  \"Moncton\",\n  \"Mont Orford\",\n  \"Mont Royal\",\n  \"Mont Tremblant\",\n  \"Montagne de ski\",\n  \"Montréal\",\n  \"Montérégie\",\n  \"Moscou\",\n  \"Mosquée\",\n  \"Motel\",\n  \"Mumbai\",\n  \"Mur de Berlin\",\n  \"Muse du Louvres\",\n  \"Musée\",\n  \"Mykonos\",\n  \"Nanaimo\",\n  \"Nettoyeur\",\n  \"New Delhi\",\n  \"New York\",\n  \"Niagara Falls\",\n  \"Notaire\",\n  \"Notre-Dame de Paris\",\n  \"Nouvelle-Zélande\",\n  \"Nunavut\",\n  \"Old Orchard\",\n  \"Optométriste\",\n  \"Opéra de Sydney\",\n  \"Opéra\",\n  \"Oratoire St-Joseph\",\n  \"Orthodontiste\",\n  \"Orthophoniste\",\n  \"Orégon\",\n  \"Ottawa\",\n  \"Outaouais\",\n  \"Pakistan\",\n  \"Palais de Buckingham\",\n  \"Palestine\",\n  \"Palm Beach\",\n  \"Parc Safari\",\n  \"Parc à chien\",\n  \"Parc\",\n  \"Paris\",\n  \"Partnénon\",\n  \"Patinoire\",\n  \"Patisserie\",\n  \"Pentagone\",\n  \"Percé\",\n  \"Pharmacie\",\n  \"Phoenix\",\n  \"Physiothérapeute\",\n  \"Piscine\",\n  \"Pizzéria\",\n  \"Place Rouge\",\n  \"Place des Arts\",\n  \"Plage\",\n  \"Planétarium\",\n  \"Poissonnerie\",\n  \"Pologne\",\n  \"Pompéii\",\n  \"Pont Champlain\",\n  \"Pont Jacques-Cartier\",\n  \"Pont d'Avignon\",\n  \"Pont du Golden Gate\",\n  \"Port-au-Prince\",\n  \"Portugal\",\n  \"Poste de police\",\n  \"Prague\",\n  \"Promener le chien\",\n  \"Provence\",\n  \"Psychiatre\",\n  \"Psychologue\",\n  \"Puerto Plata\",\n  \"Pyramides d'Égypte\",\n  \"Pédalo\",\n  \"Pédiatre\",\n  \"Pépinière\",\n  \"Pérou\",\n  \"Pêche sur glace\",\n  \"Pêcher\",\n  \"Quartier Dix30\",\n  \"Quilles\",\n  \"Quincaillerie\",\n  \"Québec\",\n  \"Randonnée\",\n  \"Raquette\",\n  \"Reparateur de télé\",\n  \"Restaurant\",\n  \"Rimouski\",\n  \"Rio de Janeiro\",\n  \"Rivière du Loup\",\n  \"Rocher Percé\",\n  \"Rocheuses\",\n  \"Rome\",\n  \"Russie\",\n  \"Régina\",\n  \"République Dominicaine\",\n  \"République Tchèque\",\n  \"Réserve faunique\",\n  \"SAAQ\",\n  \"SAQ\",\n  \"Saguenay Lac St-Jean\",\n  \"Saint-Pétersbourg\",\n  \"Salle du Royaume\",\n  \"Salon de bronzage\",\n  \"Salon de coiffure\",\n  \"Salon funéraire\",\n  \"Salt Lake City\",\n  \"San Francisco\",\n  \"Saskachewan\",\n  \"Sept Iles\",\n  \"Serrurier\",\n  \"Shawinigan\",\n  \"Sherbrooke\",\n  \"Sibérie\",\n  \"Sicile\",\n  \"Simons\",\n  \"Singapour\",\n  \"Spa\",\n  \"St-Jean\",\n  \"St-Tite\",\n  \"Stampede de Calgary\",\n  \"Starbucks\",\n  \"Station de métro\",\n  \"Station service\",\n  \"Statue de la Liberté\",\n  \"Stockholm\",\n  \"Stonehenge\",\n  \"Subway\",\n  \"Suisse\",\n  \"Suède\",\n  \"Sydney\",\n  \"Synagogue\",\n  \"Tailleur\",\n  \"Taj Mahal\",\n  \"Tampa Bay\",\n  \"Terre-Neuve\",\n  \"Texas\",\n  \"Thaïlande\",\n  \"Théatre\",\n  \"Time Square\",\n  \"Timmins\",\n  \"Tokio\",\n  \"Toronto\",\n  \"Tour Eiffel\",\n  \"Tour de Pise\",\n  \"Tour du CN\",\n  \"Travail\",\n  \"Triangle des Bermudes\",\n  \"Trois Rivières\",\n  \"Tunisie\",\n  \"Turquie\",\n  \"Université\",\n  \"Urgence\",\n  \"Vancouver\",\n  \"Varsovie\",\n  \"Vatican\",\n  \"Venise\",\n  \"Vermont\",\n  \"Victoria\",\n  \"Vietnam\",\n  \"Vieux Forum\",\n  \"Vieux Port\",\n  \"Vignoble\",\n  \"Virginia Beach\",\n  \"Voyage tout inclus\",\n  \"Voyage\",\n  \"Vénézuella\",\n  \"Vétérinaire\",\n  \"Walt Disney World\",\n  \"Washington\",\n  \"Whitehorse\",\n  \"Winnipeg\",\n  \"Yellowknife\",\n  \"Yukon\",\n  \"Zoo de Granby\",\n  \"Zoo\",\n  \"Zürich\",\n  \"Écosse\",\n  \"Édimbourg\",\n  \"Église de Scientologie\",\n  \"Église\",\n  \"Épicerie\",\n  \"Épluchette de maïs\",\n  \"États-Unis\",\n  \"Île d'Orléans\",\n  \"Île de Gilligan\",\n  \"Île du Prince-Édouard\",\n  \"Îles Galapagos\",\n  \"Îles de la Madeleine\",\n]);\n\nexport enum Dictionary {\n  PLACES\n}\n\nexport const words = (dict: Dictionary | null): Set<string> => {\n  switch (dict) {\n  case Dictionary.PLACES:\n  case null:\n    return places;\n  }\n};\n","import { ChangeEvent, useEffect, useState } from 'react';\nimport { HashRouter, Link, Redirect, Route, Switch, useHistory, useLocation, useParams } from \"react-router-dom\";\nimport queryString, { ParsedQuery } from 'query-string';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { Button, Card, Preloader, ProgressBar, Row, Col, Select, TextInput, Section, Divider, Collection, CollectionItem, Badge } from 'react-materialize';\nimport { Game, Player, Round, User } from './Models';\nimport { Dictionary, words } from './Words';\nimport './App.css';\nimport 'materialize-css';\n\nconst Colors = {\n  red: '#d50000',\n  blue: '#2962ff',\n  teal: '#2bbbad',\n};\n\nconst Title = ({children}: {children: string}) => {\n  return(\n    <h2 style={{ fontWeight: 'lighter', color: Colors.teal }}>{ children }</h2>\n  );\n};\n\nconst Home = () => {\n  return(\n    <>\n      <Title>Mots Interdits</Title>\n\n      <Section>\n        <Row>\n          <Link to=\"/host\" className=\"waves-effect waves-light btn-large\" style={{ width: '100%' }}>Créer une partie</Link>\n        </Row>\n        <Row>\n          <Link to=\"/join\" className=\"waves-effect waves-light btn-large\" style={{ width: '100%' }}>Joindre une partie</Link>\n        </Row>\n      </Section>\n    </>\n  );\n};\n\nenum CreationState {\n  Pending,\n  Creating,\n  Created,\n}\n\nconst Host = ({ user }: { user: User }) => {\n  const [creationState, setCreationState] = useState(CreationState.Pending);\n  const [game, setGame] = useState<Game | undefined>();\n\n  useEffect(() => {\n    if (creationState !== CreationState.Pending) { return; }\n\n    setCreationState(CreationState.Creating);\n\n    (async () => {\n      setGame(await Game.create(user));\n\n      setCreationState(CreationState.Created);\n    })();\n  }, []);\n\n  if (creationState === CreationState.Created) {\n    return(\n      <Redirect to={ `/game/${game!.uid}` }></Redirect>\n    );\n  } else {\n    return(\n      <Loading/>\n    );\n  }\n};\n\nconst Error = ({children}: {children: string}) => {\n  return(\n    <Row>\n      <Card className=\"red accent-4\">\n        <span className=\"white-text\">\n          { children }\n        </span>\n      </Card>\n    </Row>\n  );\n};\n\nconst Join = ({user}: {user: User}) => {\n  const history = useHistory();\n  const location = useLocation();\n\n  const [gameID, setGameID] = useState<string>('');\n\n  const joinHandler = () => {\n    history.push(`/game/${ gameID }`);\n  };\n\n  const locationSearch: ParsedQuery<string> = queryString.parse(location.search);\n  const error: string | null = locationSearch.error as string;\n\n  return(\n    <>\n      {\n        !!error && <Error>{ error }</Error>\n      }\n\n      <Row>\n        <TextInput id=\"gameID\" onChange={ event => { setGameID(event.target.value); } } label=\"Identifiant\" noLayout />\n      </Row>\n\n      <Row className=\"row\">\n        <Button large onClick={joinHandler} disabled={ gameID.length === 0 }>\n          Joindre la partie\n        </Button>\n      </Row>\n\n      <Row>\n        <Link to=\"/home\">Retour</Link>\n      </Row>\n    </>\n  );\n};\n\nconst Loading = () => {\n  return(\n    <>\n      <Row>\n        <Preloader active flashing size=\"big\" />\n      </Row>\n    </>\n  );\n};\n\ninterface GameRoute {\n  gameID: string;\n}\n\nconst Lobby = ({user, game}: { user: User, game: Game }) => {\n  const currentPlayer = game.playerByUid(user.uid);\n\n  useEffect(() => {\n    if (currentPlayer?.uid !== user.uid && !game.isStarted()) {\n      game.addPlayer(user);\n    };\n  }, [user.uid, game, currentPlayer?.uid]);\n\n  if (currentPlayer) {\n    return <LobbyLoaded user={user} player={currentPlayer} game={game}/>;\n  } else {\n    return <Loading/>;\n  }\n};\n\nconst LobbyPlayersList = ({players}: { players: Array<Player> }) => {\n  if (players.length === 0) {\n    return(\n      <div>\n        Oops! Toujours aucun joueur dans cette équipe. Utilisez Tinder si vous avez besoin d'amis.\n      </div>\n    );\n  }\n\n  return(\n    <Collection className=\"left-align\">\n      {\n        players.map((player) => {\n          return(\n            <CollectionItem key={ player.uid }>\n              { player.name } { player.ready && <Badge newIcon caption=\"Prêt!\" /> }\n            </CollectionItem>\n          );\n        })\n      }\n    </Collection>\n  );\n};\n\nconst LobbyLoaded = ({user, player, game}: { user: User, player: Player, game: Game }) => {\n  const allPlayers = game.allPlayers();\n\n  const toggleReadinessHandler = () => {\n    player.update({ ready: !player.ready });\n  };\n\n  const nameChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n    player.update({ name: event.target.value });\n  };\n\n  const roundLengthHandler = (event: ChangeEvent<HTMLSelectElement>) => {\n    game.update({ roundLength: parseInt(event.target.value) });\n  };\n\n  const roundCountHandler = (event: ChangeEvent<HTMLSelectElement>) => {\n    game.update({ roundCount: parseInt(event.target.value) });\n  };\n\n  const joinTeamHandler = (event: ChangeEvent<HTMLSelectElement>) => {\n    player.update({ team: parseInt(event.target.value) });\n  };\n\n  const startGameHandler = () => {\n    game.start();\n  };\n\n  const startButtonStatus: boolean = !game.isOwner(player) || !allPlayers.every((player) => player.ready);\n\n  return(\n    <>\n      {\n        game.isOwner(player) &&\n          <Row>\n            <Card>\n              Invite des gens à joindre cette partie en leur partageant le code <b>{ game.uid }</b>.\n            </Card>\n          </Row>\n      }\n\n      <Section>\n        <Row>\n          <TextInput id=\"name\" value={ player.name } onChange={ nameChangeHandler } disabled={ player.ready } label=\"Nom\" noLayout />\n        </Row>\n\n        <Row>\n          <Select id=\"team\" onChange={  joinTeamHandler } noLayout value={ player.team.toString() } label=\"Équipe\" disabled={ player.ready }>\n            <option value=\"0\">Équipe Rouge</option>\n            <option value=\"1\">Équipe Bleue</option>\n          </Select>\n        </Row>\n\n        {\n          game.isOwner(player) &&\n            <>\n              <Row>\n                <Select id=\"roundLength\" onChange={ roundLengthHandler } noLayout value={ game.roundLength.toString() } label=\"Durée d'une manche\" disabled={ player.ready }>\n                  <option value=\"5\">5s</option>\n                  <option value=\"20\">20s</option>\n                  <option value=\"30\">30s</option>\n                  <option value=\"60\">60s</option>\n                </Select>\n              </Row>\n\n              <Row>\n                <Select id=\"roundCount\" onChange={ roundCountHandler } noLayout value={ game.roundCount.toString() } label=\"Nombre de manches\" disabled={ player.ready }>\n                  <option value=\"1\">1</option>\n                  <option value=\"4\">4</option>\n                  <option value=\"12\">12</option>\n                  <option value=\"20\">20</option>\n                </Select>\n              </Row>\n            </>\n        }\n\n        <Row>\n          <h5 style={{ fontWeight: 'lighter', color: Colors.red, textAlign: \"left\" }}>Équipe Rouge</h5>\n\n          <LobbyPlayersList players={ allPlayers.filter((player) => player.team === 0) } />\n        </Row>\n\n        <Row>\n          <h5 style={{ fontWeight: 'lighter', color: Colors.blue, textAlign: \"left\" }}>Équipe Bleue</h5>\n\n          <LobbyPlayersList players={ allPlayers.filter((player) => player.team === 1) } />\n        </Row>\n\n        <Row>\n          <Button large onClick={ toggleReadinessHandler } disabled={ player.name.length === 0 }>\n            { player.ready ? \"Pas prêt!\" : \"Prêt!\" }\n          </Button>\n\n          <Button large onClick={ startGameHandler } disabled={ startButtonStatus } style={{ marginLeft: \"10px\" }}>\n            Débuter!\n          </Button>\n        </Row>\n\n        <Row>\n          <Link to=\"/home\">Retour</Link>\n        </Row>\n      </Section>\n    </>\n  );\n};\n\nconst RoundController = ({ player, game, round }: RoundProps) => {\n  const [timeRemaining, setTimeRemaining] = useState<number>(game.roundLength * 1000);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      const remaining = round.startedAt! + (game.roundLength * 1000) - Date.now();\n\n      setTimeRemaining(remaining);\n\n      if (remaining <= 0) {\n        clearInterval(timer);\n      }\n    }, 50);\n\n    return () => { clearInterval(timer); };\n  }, [round.startedAt, game.roundLength]);\n\n  useEffect(() => {\n    if (timeRemaining <= 0) {\n      round.review();\n    }\n  }, [timeRemaining]);\n\n  const timeRemainingInSeconds = Math.floor(timeRemaining / 1000);\n  const roundOwner = game.playerByUid(round.ownerUid)!;\n  const teamScores = game.teamScores();\n\n  let component: JSX.Element;\n\n  if (round.isOwner(player)) {\n    component = <RoundOwner game={ game } round={ round } timeRemaining={ timeRemainingInSeconds } />;\n  } else if (player.isOnSameTeam(roundOwner)) {\n    component = <RoundTeammate roundOwner={ roundOwner } game={ game } round={ round } timeRemaining={ timeRemainingInSeconds } />;\n  } else {\n    component = <RoundOpponent roundOwner={ roundOwner } game={ game } round={ round } timeRemaining={ timeRemainingInSeconds } />;;\n  }\n\n  return(\n    <>\n      <Row>\n        <h6>\n          <div style={{ color: roundOwner.team === 0 ? Colors.red : Colors.blue }} className=\"left left-align\">\n            { roundOwner.name }\n          </div>\n\n          <div className=\"right\">\n            <Badge newIcon caption={ teamScores[1].toString() } className=\"blue white-text\" />\n            <Badge newIcon caption={ teamScores[0].toString() } className=\"red white-text\" />\n          </div>\n        </h6>\n      </Row>\n\n      <Divider />\n\n      <Section>\n        { component }\n      </Section>\n    </>\n  );\n};\n\ninterface RoundProps {\n  player: Player;\n  game: Game;\n  round: Round;\n}\n\nclass RoundProgress {\n  constructor(\n    readonly attemptedWords: Array<{ word: string, guessed: boolean }> = []\n  ) {}\n\n  guessed(word: string): RoundProgress {\n    return new RoundProgress(this.attemptedWords.concat({word, guessed: true}));\n  }\n\n  skipped(word: string): RoundProgress {\n    return new RoundProgress(this.attemptedWords.concat({word, guessed: false}));\n  }\n}\n\ninterface NonOwnerRoundProps {\n  roundOwner: Player;\n  game: Game;\n  round: Round;\n  timeRemaining: number;\n}\n\nconst RoundTeammate = ({ roundOwner, game, round, timeRemaining }: NonOwnerRoundProps) => {\n  if (round.isPending()) {\n    return(\n      <Row>\n        C'est à ton équipe de jouer! <b>{ roundOwner.name }</b> a <b>{ game.roundLength } secondes</b> pour vous faire deviner un maximum de mots. Bonne chance!\n      </Row>\n    );\n  } else if (round.isRunning()) {\n    return(\n      <Row>\n        <TimeRemaining timeRemaining={ timeRemaining } totalTime={ game.roundLength } />\n      </Row>\n    );\n  } else {\n    return(\n      <Row>\n        Beau travail! Ou pas. J'en sais rien. <b>{ roundOwner.name }</b> est en train de valider\n        les résultats, après quoi c'est au tour de l'équipe adverse. Dites-lui de se dépêcher.\n      </Row>\n    );\n  }\n};\n\nconst RoundOpponent = ({ roundOwner, game, round, timeRemaining }: NonOwnerRoundProps) => {\n  if (round.isPending()) {\n    const funnyThingsToSay: Array<string> = [\n      \" C'est le temps de faire une pause pipi.\",\n      \" C'est le temps de te servir un verre.\",\n      \" Si t'as du lavage à faire, c'est le temps.\",\n      \" Tournes-toi les pouces.\",\n      \" Sois prêt pour la prochaine manche!\",\n      \" D'ici là, t'as rien à faire.\"\n    ];\n\n    return(\n      <Row>\n        C'est à l'autre équipe de jouer. Ils ont <b>{ game.roundLength } secondes</b> pour faire deviner un maximum de mots.\n        { funnyThingsToSay[Math.floor(Math.random() * Math.floor(funnyThingsToSay.length))] }\n      </Row>\n    );\n  } else if (round.isRunning()) {\n    return(\n      <Row>\n        <TimeRemaining timeRemaining={ timeRemaining } totalTime={ game.roundLength } />\n      </Row>\n    );\n  } else {\n    return(\n      <Row>\n        Terminé! <b>{ roundOwner.name }</b> est en train de valider\n        les résultats de leur équipe, après quoi c'est votre tour!\n      </Row>\n    );\n  }\n};\n\ninterface OwnerRoundProps {\n  game: Game;\n  round: Round;\n  timeRemaining: number;\n}\n\nconst RoundOwner = ({ game, round, timeRemaining }: OwnerRoundProps) => {\n  const [roundProgress, setRoundProgress] = useState<RoundProgress>(new RoundProgress());\n\n  if (round.isReview()) {\n    return <RoundOwnerRecap game={ game } round={ round } attemptedWords={ roundProgress.attemptedWords } />;\n  } else if (round.isRunning()) {\n    return <RoundOwnerRunning game={ game } round={ round } roundProgress={ roundProgress } setRoundProgress={ setRoundProgress } timeRemaining={timeRemaining} />;\n  } else {\n    return(\n      <>\n        <Row>\n          C'est à ton tour. Tu as <b>{ game.roundLength } secondes</b> pour faire deviner un maximum\n          de mots à ton équipe. Bonne chance!\n        </Row>\n\n        <Row>\n          <Button large onClick={ () => { round.start(); } }>\n            Débuter!\n          </Button>\n        </Row>\n      </>\n    );\n  }\n};\n\ninterface RoundOwnerRecapProps {\n  game: Game;\n  round: Round;\n  attemptedWords: { word: string, guessed: boolean }[];\n};\n\nconst RoundOwnerRecap = ({ game, round, attemptedWords }:  RoundOwnerRecapProps) => {\n  const [words, setWords] = useState<Array<{ word: string, guessed: boolean }>>(attemptedWords);\n\n  const continueHandler = () => {\n    round.complete(words);\n    game.continue();\n  };\n\n  const flipWord = (flippedWord: { word: string, guessed: boolean }) => {\n    setWords(words.map((word) => word.word === flippedWord.word ? { word: word.word, guessed: !flippedWord.guessed } : word));\n  };\n\n  const guessedWordsCount = words.filter((word) => word.guessed).length;\n\n  let congratulation: JSX.Element;\n  if (guessedWordsCount === 0) {\n    congratulation = <>Isssshhh. Tu n'as trouvé aucun mot. Certains diront que les mots étaient trop difficiles... Entoucas.</>;\n  } else if (guessedWordsCount === 1) {\n    congratulation = <>Ouin. Un. Un seul mot. Bravo champion! Si jamais en plus tu t'es trompé, tu peux modifier le résultat en cliquant dessus.</>;\n  } else {\n    congratulation = <>Bravo champion! Tu as trouvé <b>{ guessedWordsCount }</b> mots! Si jamais tu t'es trompé, tu peux modifier un résultat en cliquant sur le mot problématique.</>;\n  }\n\n  return (\n    <>\n      <Row>\n        { congratulation }\n      </Row>\n\n      {\n        !!words.length &&\n          <Row>\n            <WordCollection words={ words } onClick={ flipWord } />\n          </Row>\n      }\n\n      <Row>\n        <Button large onClick={ continueHandler }>\n          Continuer\n        </Button>\n      </Row>\n    </>\n  );\n};\n\nconst WordCollection = ({ words, onClick }: { words: Array<{ word: string, guessed: boolean }>, onClick?: Function }) => {\n  return(\n    <Collection className=\"left-align\">\n      {\n        words.map((word) => {\n          return(\n            <div key={ word.word } style={{ userSelect: 'none', textDecorationLine: word.guessed ? \"inherit\" : \"line-through\" }} className=\"collection-item\" onClick={ () => { onClick && onClick(word); } }>\n              { word.word }\n            </div>\n          );\n        })\n      }\n    </Collection>\n  );\n};\n\nconst randomWordExcept = (fromSource: Set<string>, except: Set<string>): string => {\n  const difference: Set<string> = new Set(fromSource);\n  for (let elem of except) {\n    difference.delete(elem);\n  }\n  const asArray = Array.from(difference);\n  return asArray[Math.floor(Math.random() * Math.floor(asArray.length))]!;\n};\n\ninterface RoundOwnerRunningProps {\n  game: Game;\n  round: Round;\n  roundProgress: RoundProgress;\n  timeRemaining: number;\n  setRoundProgress: (roundProgress: RoundProgress) => void;\n}\n\nconst TimeRemaining = ({timeRemaining, totalTime} : { timeRemaining: number, totalTime: number }) => {\n  return(\n    <>\n      <h6>\n        <b>{ timeRemaining } seconde{ timeRemaining > 1 ? \"s\" : \"\" }</b>\n      </h6>\n\n      <ProgressBar progress={ Math.ceil((totalTime - timeRemaining) / totalTime * 100) } />\n    </>\n  );\n};\n\nconst RoundOwnerRunning = ({ game, round, roundProgress, timeRemaining, setRoundProgress }: RoundOwnerRunningProps) => {\n  const pickNextWord = (roundProgress: RoundProgress) => {\n    return randomWordExcept(words(Dictionary.PLACES), new Set(game.guessedWords().concat(roundProgress.attemptedWords.map(({word}) => word))));\n  };\n\n  const [currentWord, setCurrentWord] = useState<string>(pickNextWord(roundProgress));\n\n  const guessedHandler = () => {\n    const newRoundProgress = roundProgress.guessed(currentWord);\n    setRoundProgress(newRoundProgress);\n    setCurrentWord(pickNextWord(newRoundProgress));\n  };\n\n  const skipHandler = () => {\n    const newRoundProgress = roundProgress.skipped(currentWord);\n    setRoundProgress(newRoundProgress);\n    setCurrentWord(pickNextWord(newRoundProgress));\n  };\n\n  return (<>\n    <Row>\n      <TimeRemaining totalTime={ game.roundLength } timeRemaining={ timeRemaining } />\n    </Row>\n\n    <Row>\n      <Card>\n        <h4 style={{ padding: 0, margin: 0 }}>{ currentWord }</h4>\n      </Card>\n    </Row>\n\n    <Row>\n      <Button large onClick={ guessedHandler }>\n        Réussi!\n      </Button>\n\n      <Button large onClick={ skipHandler } style={{ marginLeft: \"10px\" }} className={ \"red\" }>\n        Rejeter\n      </Button>\n    </Row>\n  </>);\n};\n\nconst GameController = ({user}: {user: User}) => {\n  const { gameID } = useParams<GameRoute>();\n\n  const [game, setGame] = useState<Game | null>(null);\n  const [error, setError] = useState<string>('');\n\n  useEffect(() => {\n    const ref = Game.subscribe(gameID.toLowerCase(), (newGame) => {\n      if (newGame) {\n        setGame(newGame);\n      } else {\n        setError(\"Cette partie n'est plus disponible\");\n      }\n    });\n\n    return () => {\n      ref.off();\n    };\n  }, [gameID]);\n\n  if (error) {\n    return(<Redirect to={ `/join?error=${error}` }></Redirect>);\n  } else if (!game) {\n    return (<Loading/>);\n  } else if (game.isCompleted()) {\n    return (<CompletedGame game={ game } user={ user } />);\n  } else if (game.isStarted()) {\n    const player = game.playerByUid(user.uid)!;\n\n    if (player) {\n      return <RoundController round={ game.currentRound()! } player={ player } game={ game } />;\n    } else {\n      return <AlreadyStartedGame />;\n    }\n  } else {\n    return(<Lobby user={user} game={game} />);\n  }\n};\n\nconst CompletedGame = ({ game, user }: { game: Game, user: User }) => {\n  const player: Player = game.playerByUid(user.uid)!;\n  const scores: [number, number] = game.teamScores();\n\n  const opponentTeam: number = player.team === 0 ? 1 : 0;\n\n  let bannerComponent: JSX.Element;\n\n  if (scores[player.team] > scores[opponentTeam]) {\n    bannerComponent =\n      <>\n        <h1>🎉</h1>\n        <Row>Félicitations! Quelle incroyable victoire! Qui aurait pu prédire un tel résultat?</Row>\n      </>;\n  } else if (scores[player.team] < scores[opponentTeam]) {\n    bannerComponent =\n      <>\n        <h1>😢</h1>\n        <Row>Booh! Vous avez perdu. Entre toi et moi, je crois qu'ils ont triché!</Row>\n      </>;\n  } else {\n    bannerComponent =\n      <>\n        <h1>😲</h1>\n        <Row>Whoa, c'est l'égalité!</Row>\n      </>;\n  }\n\n  return(\n    <>\n      { bannerComponent }\n\n      <Row style={{ paddingBottom: \"10px\" }}>\n        <Col s={ 6 }>\n          <h1 className=\"red white-text\" style={{ padding: 0, margin: 0, borderRadius: \"10px\" }}>{ scores[0] }</h1>\n        </Col>\n\n        <Col s={ 6 }>\n          <h1 className=\"blue white-text\" style={{ padding: 0, margin: 0, borderRadius: \"10px\" }}>{ scores[1] }</h1>\n        </Col>\n      </Row>\n\n      {\n        game.rounds.map((round, index) => {\n          const currentPlayer = game.playerByUid(round.ownerUid)!;\n\n          return(\n            <>\n              <Row>\n                <h6>\n                  <div style={{ color: currentPlayer.team === 0 ? Colors.red : Colors.blue }} className=\"left left-align\">\n                    { currentPlayer.name }\n                  </div>\n\n                  <div className=\"right\">\n                    <Badge newIcon caption={ `${ round.guessedWords().length }/${ round.words.length}` } className={ currentPlayer.team === 0 ? \"red white-text\" : \"blue white-text\" } />\n                  </div>\n                </h6>\n              </Row>\n\n              <Row>\n                {\n                  round.words.length === 0\n                    ?\n                    \"Aucun mot. Rien. Niet. Nada.\"\n                    :\n                    <WordCollection words={ round.words } />\n                }\n              </Row>\n            </>\n          );\n        })\n      }\n\n      <Row>\n        <Link to=\"/home\">Accueil</Link>\n      </Row>\n    </>\n  );\n};\n\nconst AlreadyStartedGame = () => {\n  return (\n    <>\n      <h1>⚠️</h1>\n\n      <Row>\n        Désolé, tes amis de t'on pas attendu, la partie est déjà en cours.\n      </Row>\n\n      <Row>\n        <Link to=\"/home\">Retour</Link>\n      </Row>\n    </>\n  );\n};\n\nconst App = () => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    firebase.auth().signInAnonymously().then(data => setUser(data.user));\n  }, []);\n\n  if (!user) {\n    return <Loading/>;\n  } else {\n    return (\n      <HashRouter>\n        <Switch>\n          <Route path=\"/join\" render={(props) => <Join {...props} user={user} />} />\n          <Route path=\"/host\" render={(props) => <Host {...props} user={user}/>}/>\n          <Route path=\"/game/:gameID\" render={(props) => <GameController {...props} user={user}/>}/>\n          <Route path=\"/\" component={Home}/>\n        </Switch>\n      </HashRouter>\n    );\n  }\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport firebase from 'firebase/app';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyBElBT0EATGzckFNUZ69M-CKcIq0VynO08\",\n  authDomain: \"justone-7ffe6.firebaseapp.com\",\n  projectId: \"justone-7ffe6\",\n  storageBucket: \"justone-7ffe6.appspot.com\",\n  databaseURL: \"https://justone-7ffe6-default-rtdb.firebaseio.com/\",\n  messagingSenderId: \"107210378075\",\n  appId: \"1:107210378075:web:5ad604222f2ad1d8a2687e\"\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('app')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}